[TOC]

## Solution

--- 

#### How to Traverse the Tree. DFS: Preorder, Inorder, Postorder; BFS.

There are two general strategies to traverse a tree:

- *Depth First Search* (`DFS`)

  In this strategy, we adopt the `depth` as the priority, so that one would start from a root and reach all the way down to a certain leaf, and then back to the root to reach another branch.

  The DFS strategy can further be distinguished as `preorder`, `inorder`, and `postorder` depending on the relative order among the root node, left node, and right node.

- *Breadth First Search* (`BFS`)

  We scan through the tree level by level, following the order of height, from top to bottom. The nodes on higher levels would be visited before the ones with lower levels.

In the following figure, the nodes are enumerated in the order you visit them, please follow `1-2-3-4-5` to compare different strategies.

![postorder](https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/solution/../Figures/108/bfs_dfs.png)
<br />
<br />

---

#### Construct BST from Inorder Traversal: Why the Solution is _Not_ Unique

It's known that [inorder traversal of BST is an array sorted in the ascending order](https://leetcode.com/articles/delete-node-in-a-bst/).

Having the sorted array as an input, we could rewrite the problem as _Construct Binary Search Tree from Inorder Traversal_.

> Does this problem have a unique solution, i.e. could inorder traversal be used as a unique identifier to encore/decode BST? The answer is _no_.

Here is the funny thing about BST. Inorder traversal is _not_ a unique identifier of BST. At the same time, both preorder and postorder traversals _are_ unique identifiers of BST. [From these traversals one could restore the inorder one](https://leetcode.com/articles/construct-bst-from-preorder-traversal/):
`inorder = sorted(postorder) = sorted(preorder)`, and [inorder + postorder or inorder + preorder are both unique identifiers of whatever binary tree](https://leetcode.com/articles/construct-binary-tree-from-inorder-and-postorder-t/).

So, the problem "sorted array -> BST" has multiple solutions.

![postorder](https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/solution/../Figures/108/bst2.png)

Here we have an additional condition: _the tree should be height-balanced_, i.e. the depths of the two subtrees of every node never differ by more than 1.

> Does it make the solution to be unique? Still no.

![postorder](https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/solution/../Figures/108/height.png)

Basically, the height-balanced restriction means that at each step one has to pick up the number in the middle as a root. That works fine with arrays containing an odd number of elements but there is no predefined choice for arrays with an even number of elements.

![postorder](https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/solution/../Figures/108/pick.png)

One could choose the left middle element, or the right middle one, and both choices will lead to _different_ height-balanced BSTs. Let's see that in practice: in Approach 1 we will always pick up the left middle element and in Approach 2 - the right middle one. That will generate _different_ BSTs but both solutions will be accepted.
<br />
<br />

---

#### Approach 1: Preorder Traversal: Always Choose Left Middle Node as a Root

**Algorithm**

![postorder](https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/solution/../Figures/108/left.png)

- Implement helper function `helper(left, right)`, which constructs BST from nums elements between indexes `left` and `right`:

  - If left > right, then there is no elements available for that subtree. Return None.

  - Pick left middle element: `p = (left + right) // 2`.

  - Initiate the root: `root = TreeNode(nums[p])`.

  - Compute recursively left and right subtrees: `root.left = helper(left, p - 1)`, `root.right = helper(p + 1, right)`.
- Return `helper(0, len(nums) - 1)`.

**Implementation**

<iframe src="https://leetcode.com/playground/UDf8jUHq/shared" frameBorder="0" width="100%" height="412" name="UDf8jUHq"></iframe>

**Complexity Analysis**

* Time complexity: $O(N)$ since we visit each node exactly once.

* Space complexity: $O(\log N)$.

  The recursion stack requires $O(\log N)$ space because the tree is height-balanced. Note that the $O(N)$ space used to store the output does not count as auxiliary space, so it is not included in the space complexity.

<br /> 
<br />

---

#### Approach 2: Preorder Traversal: Always Choose Right Middle Node as a Root

**Algorithm**

![postorder](https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/solution/../Figures/108/right.png)

- Implement helper function `helper(left, right)`, which constructs BST from nums elements between indexes `left` and `right`:

  - If left > right, then there are no elements available for that subtree. Return None.

  - Pick the right middle element:

    - `p = (left + right) // 2`.

    - If `left + right` is odd, add 1 to p-index.
  - Initiate the root: `root = TreeNode(nums[p])`.

  - Compute recursively left and right subtrees: `root.left = helper(left, p - 1)`, `root.right = helper(p + 1, right)`.
- Return `helper(0, len(nums) - 1)`.

**Implementation**

<iframe src="https://leetcode.com/playground/meAgzGot/shared" frameBorder="0" width="100%" height="429" name="meAgzGot"></iframe>

**Complexity Analysis**

* Time complexity: $O(N)$ since we visit each node exactly once.

* Space complexity: $O(\log N)$.

  The recursion stack requires $O(\log N)$ space because the tree is height-balanced. Note that the $O(N)$ space used to store the output does not count as auxiliary space, so it is not included in the space complexity.

<br /> 
<br />

---

#### Approach 3: Preorder Traversal: Choose a Random Middle Node as a Root

This one is for fun. Instead of a predefined choice, we will pick randomly the left or right middle node at each step. Each run will result in a different solution and they all will be accepted.

![postorder](https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/solution/../Figures/108/random.png)

**Algorithm**

- Implement helper function `helper(left, right)`, which constructs BST from nums elements between indexes `left` and `right`:

  - If left > right, then there are no elements available for that subtree. Return None.

  - Pick a random middle element:

    - `p = (left + right) // 2`.

    - If `left + right` is odd, add randomly 0 or 1 to p-index.
  - Initiate the root: `root = TreeNode(nums[p])`.

  - Compute recursively left and right subtrees: `root.left = helper(left, p - 1)`, `root.right = helper(p + 1, right)`.
- Return `helper(0, len(nums) - 1)`.

**Implementation**

<iframe src="https://leetcode.com/playground/aToKCjgn/shared" frameBorder="0" width="100%" height="446" name="aToKCjgn"></iframe>

**Complexity Analysis**

* Time complexity: $O(N)$ since we visit each node exactly once.

* Space complexity: $O(\log N)$.

  The recursion stack requires $O(\log N)$ space because the tree is height-balanced. Note that the $O(N)$ space used to store the output does not count as auxiliary space, so it is not included in the space complexity.

