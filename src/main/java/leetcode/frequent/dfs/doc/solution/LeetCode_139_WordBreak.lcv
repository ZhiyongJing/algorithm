[TOC]

## Video Solution

---

<div> 
 <div class="video-container"> 
  <iframe src="https://player.vimeo.com/video/487458046" width="640" height="360" frameborder="0" allow="autoplay; fullscreen" allowfullscreen=""></iframe> 
 </div> 
</div>

<div>
 &nbsp; 
</div>

## Solution Article

---

#### Approach 1: Breadth-First Search

**Intuition**

Let's imagine the indices of `s` as a graph. Each index can be thought of as a node, which represents building `s` up to the index.

Adding a word to an existing string is like an edge between nodes. For a node `start`, we can move to node `end` if the substring of `s` between `start, end` exists in `wordDict`.

For example, let's say we have `s = "leetcode"` and `wordDict = ["leet", "code"]`. We are currently at node `4`, which implies that we have built `"leet"` (the first 4 characters of `s`). We can move to node `8`, because the substring of `s` with indices `[4, 8)` is `"code"`, which is in `wordDict`.

We start at node `0`, which represents the empty string. We want to reach node `s.length`, which implies that we have built the entire string. We can run a BFS to accomplish this traversal. If you're not familiar with BFS, check out the relevant [Explore Card](https://leetcode.com/explore/learn/card/graph/620/breadth-first-search-in-graph/).

At each node `start`, we iterate over all the nodes `end` that come after `start`. For each `end`, we check if the substring between `start, end` is in `wordDict`. If it is, we can add `end` to the queue.

We will first convert `wordDict` into a set so that we can perform the checks in constant time. We will also use a data structure `seen` to prevent us from visiting a node more than once.

**Algorithm**

1. Convert `wordDict` into a set `words`.
2. Initialize a `queue` with `0` and a set `seen`.
3. While the `queue` is not empty:
   - Remove the first element, `start`.
   - If `start == s.length`, return `true`.
   - Iterate `end` from `start + 1` up to and including `s.length`. For each `end`, if `end` has not been visited yet,
     - Check the substring starting at `start` and ending before `end`. If it is in `words`, add `end` to the queue and mark it in `seen`.
4. Return `false` if the BFS finishes without reaching the final node.

**Implementation**

<iframe src="https://leetcode.com/playground/aQSP5eqM/shared" frameBorder="0" width="100%" height="500" name="aQSP5eqM"></iframe>

**Complexity Analysis**

Given $n$ as the length of `s`, $m$ as the length of `wordDict`, and $k$ as the average length of the words in `wordDict`,

* Time complexity: $O(n^3 + m \cdot k)$

  There are $O(n)$ nodes. Because of `seen`, we never visit a node more than once. At each node, we iterate over the nodes in front of the current node, of which there are $O(n)$. For each node `end`, we create a substring, which also costs $O(n)$.

  Therefore, handling a node costs $O(n^2)$, so the BFS could cost up to $O(n^3)$. Finally, we also spent $O(m \cdot k)$ to create the set `words`.

* Space complexity: $O(n + m \cdot k)$

  We use $O(n)$ space for `queue` and `seen`. We use $O(m \cdot k)$ space for the set `words`.

<br />

---

#### Approach 2: Top-Down Dynamic Programming

**Intuition**

> If you're not familiar with dynamic programming, we recommend checking out the [Dynamic Programming explore card](https://leetcode.com/explore/featured/card/dynamic-programming/). This problem is on the difficult side, so we will assume that readers are already familiar with the principles of DP.

Let's have a function `dp` that returns a boolean indicating if it is possible to build `s` up to and including the index `i`.

For example, given `s = "leetcode"` and `wordDict = ["leet", "code"]`, `dp(3)` would return `true`. `s` up to index `3` is `"leet"`, and we can build `"leet"` using the words in `wordDict`. The answer to the problem would be `dp(s.length - 1)`, which represents if we can build `s`.

The base case of this function is when `i < 0`. This would represent an empty string, and we can always build an empty string by doing nothing. Therefore, `dp(i) = true` for `i < 0`.

Given an index `i`, we need a recurrence relation to determine if `dp(i)` is `true` or `false`. For `dp(i)` to be `true`, there are two requirements:

1. First, there needs to be a `word` from `wordDict` that **ends** at index `i`. Given a `word`, the substring of `s` from indices `i - word.length + 1` up to and including `i` should match `word`. We can check every `word` for this.
2. If we manage to find a `word` that **ends** at index `i`, we would need to add it on top of another string (since we are building `s` by joining words together one by one). We need to make sure that the string we are adding onto is also buildable. If we find a `word` that passes the first check, it means `word` would start at index `i - word.length + 1`. The index before that is `i - word.length`. To check if the string ending at that index is buildable, we can refer to `dp(i - word.length)`.

This gives us our recurrence relation:

$\large{\text{dp(i)} = \text{any}(\text{s}[\text{i - word.length + 1, i}] == \text{word \&\& dp(i - \text{word.length})})}$

That is, there exists any `word` that satisfies both of the listed conditions.

We can implement a recursive function `dp(i)` that implements the base cases and recurrence. We need to use memoization to avoid repeated computation.

!?!../Documents/139.json:960,540!?!

**Algorithm**

1. Declare a data structure `memo` that stores the values of `dp` for each index.
2. Create a function `dp(i)`:
   - If `i < 0`, return `true`.
   - If we already calculated `i`, return the value stored in `memo`.
   - Iterate over `wordDict`. For each `word`:
     - Check the substring of `s` ending at `i` with the same length as `word`. If the substring matches, and `dp(i - word.length)` is `true`, return `true`.
   - If no `word` satisfying the criteria was found, return `false`.
3. Return `dp(s.length - 1)`.

**Implementation**

> In Python, the <a href="https://docs.python.org/3/library/functools.html" target="_blank" rel="noopener noreferrer">functools</a> module provides super handy tools that automatically memoize a function for us. We're going to use the `@cache` decorator in the Python implementation.
>
> In Java and C++, we will use an array `memo` to save values. `memo[i] = -1` if we haven't calculated yet, `memo[i] = 0` if `dp(i) = false`, and `memo[i] = 1` if `dp(i) = true`.

<iframe src="https://leetcode.com/playground/KdGRw8YE/shared" frameBorder="0" width="100%" height="500" name="KdGRw8YE"></iframe>

**Complexity Analysis**

Given $n$ as the length of `s`, $m$ as the length of `wordDict`, and $k$ as the average length of the words in `wordDict`,

* Time complexity: $O(n \cdot m \cdot k)$

  There are $n$ states of `dp(i)`. Because of memoization, we only calculate each state once. To calculate a state, we iterate over $m$ words, and for each word perform some substring operations which costs $O(k)$. Therefore, calculating a state costs $O(m \cdot k)$, and we need to calculate $O(n)$ states.

* Space complexity: $O(n)$

  The data structure we use for memoization and the recursion call stack can use up to $O(n)$ space.

<br />

---

#### Approach 3: Bottom-Up Dynamic Programming

**Intuition**

The same algorithm can be implemented iteratively. Instead of using a function `dp(i)`, we will use an array `dp` where `dp[i]` represents the same thing that `dp(i)` did. We can use the same recurrence relation:

$\large{\text{dp[i]} = \text{any}(\text{s}[\text{i - word.length + 1, i}] == \text{word \&\& dp[i - \text{word.length}]})}$

In top-down, we started at the top (`s.length - 1`) and work our way down to the base cases. In bottom-up, we start at the bottom `(i = 0)` and work our way up to the top.

Before we check `dp[i - word.length]`, we should check if `i == word.length - 1`. This would mean that the current `word` we are placing to end at index `i` is the first word. `i - word.length` would be negative, so we need to separately check this case.

**Algorithm**

1. Initialize an array `dp` with the same length as `s` and all values initially set to `false`.
2. Iterate `i` over the indices of `s`. At each `i`:
   - Iterate over each `word` in `wordDict`:
     - Check if `i == word.length - 1` or `dp[i - word.length] = true`.
     - If so, and the substring of `s` ending at `i` with the same length as `word` matches, set `dp[i] = true` and `break`.
3. Return `dp[s.length - 1]`.

**Implementation**

<iframe src="https://leetcode.com/playground/AhT8U3qC/shared" frameBorder="0" width="100%" height="446" name="AhT8U3qC"></iframe>

**Complexity Analysis**

Given $n$ as the length of `s`, $m$ as the length of `wordDict`, and $k$ as the average length of the words in `wordDict`,

* Time complexity: $O(n \cdot m \cdot k)$

  The logic behind the time complexity is identical to the previous approach. It costs us $O(m \cdot k)$ to calculate each state, and we calculate $O(n)$ states in total.

* Space complexity: $O(n)$

  We use an array `dp` of length $n$.

<br />

---

#### Approach 4: Trie Optimization

**Intuition**

In the previous approach, we iterated over each state `i` and then calculated `dp[i]`. To calculate a given `dp[i]`, we did the following:

- Iterate over every `word` in `wordDict`
- Check if each `word` ended at the current index

This cost us $O(m \cdot k)$. In the problem constraints, we can see that the maximum value of $m \cdot k$ is `20,000`, so this is expensive. We can optimize the time it takes to calculate a given `dp[i]` by using a trie.

A trie is a data structure that can be used to efficiently search for strings. If you are not familiar with tries, we highly recommend you read the official solution to [this problem](https://leetcode.com/problems/implement-trie-prefix-tree/solution) before proceeding with this approach.

To summarize, a trie is a tree where each node is labeled. Here, we label each node with a character. The path from the root to any node represents the string that is built by the nodes on the path. The root represents the empty string.

<img src="../Figures/139/4.png" width="960"> <br>

We can start by building a trie from the words in `wordDict`. Each trie node will have an additional attribute `isWord` which indicates if the current node represents a word from `wordDict`. Then, we will calculate the same `dp` array as in the previous approach. We will calculate each state as follows:

- First, check if `i == 0` (placing first word) or `dp[i - 1]` (we could build the string up to this point). If neither are true, move on to the next state `i + 1`.
- Otherwise, we see if `dp[i]` can be `true`. Initialize a node `curr` at the `root` of the trie.
- Start iterating with a variable `j` from index `i`. For each character `s[j]`, check if we can traverse the trie.
- If we can't traverse the trie, it means no words exist starting at index `i` and ending at index `j` or beyond. We can break from the loop and move on to the next state `i + 1`.
- If we can traverse the trie, we move to the child node. We check the child's `isWord` attribute. If it is `true`, it means there is a word in `wordDict` starting at index `i` and ending at index `j`. We set `dp[j] = true`.
- We continue traversing the trie until we reach a dead end or `j` reaches the end of the string.

This allows us to handle each state in $O(n)$ instead of $O(m \cdot k)$, which is a big improvement since $n \leq 300$.

**Algorithm**

1. Build a trie from `wordDict`. Each node should also have an `isWord` attribute. Store the root of the trie in `root`.
2. Initialize an array `dp` with the same length as `s` and all values initially set to `false`.
3. Iterate `i` over the indices of `s`. At each `i`:
   - Check if `i == 0` or `dp[i - 1] = true`. If not, continue to the next `i`.
   - Set `curr = root`. Iterate `j` over the indices of `s`, starting from `i`. At each `j`,
     - Get the character at index `j` as `c = s[j]`.
     - If `c` is not in the children of `curr`, we can `break` from the loop.
     - Otherwise, move `curr` to the child labeled `c`.
     - If `curr.isWord`, set `dp[j] = true`.
4. Return `dp[s.length - 1]`.

**Implementation**

<iframe src="https://leetcode.com/playground/YfSDd32R/shared" frameBorder="0" width="100%" height="500" name="YfSDd32R"></iframe>

**Complexity Analysis**

Given $n$ as the length of `s`, $m$ as the length of `wordDict`, and $k$ as the average length of the words in `wordDict`,

* Time complexity: $O(n^2 + m \cdot k)$

  Building the trie involves iterating over all characters of all words. This costs $O(m \cdot k)$.

  Once we build the trie, we calculate `dp`. For each `i`, we iterate over all the indices after `i`. We have a basic nested for loop which costs $O(n^2)$ to handle all `dp[i]`.

* Space complexity: $O(n + m \cdot k)$

  The `dp` array takes $O(n)$ space. The trie can have up to $m \cdot k$ nodes in it.

<br />

---

#### Approach 5: A Different DP

**Intuition**

> In this approach, we will take a look at another way to implement the DP algorithm. Note that this approach is the one covered in the video.

Here, we let `dp[i]` hold the answer to the question: "is it possible to form `s` up to a length of `i`? To find the answer for each index, instead of iterating over the words in `wordDict` and checking if a `word` ends at the current index `i`, we will instead iterate over **all substrings that end before index `i`**. If we find one of these substrings is in `wordDict` **and** we can form the string prior to the substring, then `dp[i] = true`.

The reason we are checking for **before** index `i` is because we have slightly changed our `dp` definition here. In the previous problem, `i` represented the index of the last character. Here, `i` represents the length, so we are offset by one.

Before starting the DP, we first convert `wordsDict` to a set so that we can perform the checks in $O(1)$. The rest of the algorithm follows similarly to the previous approaches.

**Algorithm**

1. Convert `wordsDict` to a set `words`.
2. Initialize an array `dp` of length `n + 1` with all values set to `false`.
3. Iterate `i` from `1` until and including `n`. Here, `i` represents the length of the string starting from the beginning.
   - Iterate `j` from `0` until `i`. Here, `j` represents the first index of the substring we are checking.
   - If `dp[j]` is true AND the substring `s[j:i]` is in `words`, set `dp[i] = true` and break. Note that `s[j:i]` represents the substring starting at `j` and ending at `i - 1`.
4. Return `dp[n]`.

**Implementation**

<iframe src="https://leetcode.com/playground/hvqPeJzy/shared" frameBorder="0" width="100%" height="378" name="hvqPeJzy"></iframe>

**Complexity Analysis**

Given $n$ as the length of `s`, $m$ as the length of `wordDict`, and $k$ as the average length of the words in `wordDict`,

* Time complexity: $O(n^3 + m \cdot k)$

  First, we spend $O(m \cdot k)$ to convert `wordDict` into a set. Then we have a nested loop over `n`, which iterates $O(n^2)$ times. For each iteration, we have a substring operation which could cost up to $O(n)$. Thus this nested loop costs $O(n^3)$.

* Space complexity: $O(n + m \cdot k)$

  The `dp` array takes $O(n)$ space. The set `words` takes up $O(m \cdot k)$ space.

<br />

---

