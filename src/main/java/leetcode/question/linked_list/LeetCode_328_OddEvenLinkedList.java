package leetcode.question.linked_list;

import leetcode.util.ListNode;

/**
 *@Question:  328. Odd Even Linked List
 *@Difculty:  2 [1->Easy, 2->Medium, 3->Hard]
 *@Frequency: 59.29%
 *@Time  Complexity: O(N), where N is the number of nodes in the linked list.
 *@Space Complexity: O(1), since we are not using extra space apart from pointers.
 */
/**
 * È¢òÁõÆÊèèËø∞Ôºö
 * 328. Odd Even Linked List
 *
 * ÁªôÂÆö‰∏Ä‰∏™ÂçïÈìæË°®ÔºåË¶ÅÊ±Ç**ÈáçÊñ∞ÊéíÂàóËäÇÁÇπÁöÑÈ°∫Â∫è**Ôºå‰ΩøÂæóÔºö
 * - **ÊâÄÊúâÂ•áÊï∞Á¥¢ÂºïÁöÑËäÇÁÇπÊéíÂú®ÂâçÈù¢**
 * - **ÊâÄÊúâÂÅ∂Êï∞Á¥¢ÂºïÁöÑËäÇÁÇπÊéíÂú®ÂêéÈù¢**
 * - **‰øùÊåÅÂéüÊù•ÁöÑÁõ∏ÂØπÈ°∫Â∫è**
 *
 * **Ê≥®ÊÑè**Ôºö
 * - Á¥¢ÂºïÊòØ‰ªé `1` ÂºÄÂßãËÆ°Êï∞ÁöÑ„ÄÇ
 * - **ÂøÖÈ°ªÂú® O(1) È¢ùÂ§ñÁ©∫Èó¥** Âíå **O(N) Êó∂Èó¥Â§çÊùÇÂ∫¶** ÂÜÖÂÆåÊàê„ÄÇ
 *
 * **Á§∫‰æã 1**
 * ```plaintext
 * ËæìÂÖ•: 1 -> 2 -> 3 -> 4 -> 5
 * ËæìÂá∫: 1 -> 3 -> 5 -> 2 -> 4
 * ```
 *
 * **Á§∫‰æã 2**
 * ```plaintext
 * ËæìÂÖ•: 2 -> 1 -> 3 -> 5 -> 6 -> 4 -> 7
 * ËæìÂá∫: 2 -> 3 -> 6 -> 7 -> 1 -> 5 -> 4
 * ```
 *
 * ---
 *
 * **Ëß£È¢òÊÄùË∑Ø**
 *
 * ÈááÁî® **ÂèåÊåáÈíàÈÅçÂéÜ + ÈáçÊñ∞ËøûÊé•ÈìæË°®**
 *
 * **1. ÂÆö‰πâÊåáÈíà**
 * - `odd`  ÊåáÂêë **Â•áÊï∞Á¥¢ÂºïËäÇÁÇπ**
 * - `even` ÊåáÂêë **ÂÅ∂Êï∞Á¥¢ÂºïËäÇÁÇπ**
 * - `evenHead` ËÆ∞ÂΩïÂÅ∂Êï∞Á¥¢ÂºïÈìæË°®ÁöÑ **Â§¥ÈÉ®**ÔºåÁî®‰∫éÂêéÁª≠ËøûÊé•
 *
 * **2. ÈÅçÂéÜÈìæË°®**
 * - **ÁßªÂä® `odd` ÊåáÈíà**Ôºö
 *   - `odd.next = even.next` ËÆ© `odd` ËøûÊé•‰∏ã‰∏Ä‰∏™Â•áÊï∞Á¥¢ÂºïÁöÑËäÇÁÇπ
 *   - `odd = odd.next` ÁßªÂä® `odd` ÊåáÈíà
 * - **ÁßªÂä® `even` ÊåáÈíà**Ôºö
 *   - `even.next = odd.next` ËÆ© `even` ËøûÊé•‰∏ã‰∏Ä‰∏™ÂÅ∂Êï∞Á¥¢ÂºïÁöÑËäÇÁÇπ
 *   - `even = even.next` ÁßªÂä® `even` ÊåáÈíà
 * - **ÂΩì `even == null` Êàñ `even.next == null` ÁªìÊùüÂæ™ÁéØ**
 *
 * **3. ËøûÊé• `odd` Âíå `evenHead`**
 * - `odd.next = evenHead` ËÆ©Â•áÊï∞Á¥¢ÂºïÈìæË°®ÁöÑÊúÄÂêé‰∏Ä‰∏™ËäÇÁÇπËøûÊé•Âà∞ÂÅ∂Êï∞Á¥¢ÂºïÈìæË°®
 *
 * ---
 *
 * **‰∏æ‰æãÂàÜÊûê**
 *
 * **ËæìÂÖ•:** `1 -> 2 -> 3 -> 4 -> 5`
 *
 * **ÂàùÂßãÁä∂ÊÄÅ**
 * ```plaintext
 * odd = 1, even = 2, evenHead = 2
 * ```
 *
 * **Á¨¨ 1 ËΩÆÔºöodd ËøûÊé• 3Ôºåeven ËøûÊé• 4**
 * ```plaintext
 * 1 -> 3 -> 4 -> 5
 *       2 -> 4
 * ```
 *
 * **Á¨¨ 2 ËΩÆÔºöodd ËøûÊé• 5Ôºåeven Âèò‰∏∫ null**
 * ```plaintext
 * 1 -> 3 -> 5
 *       2 -> 4
 * ```
 *
 * **ÊúÄÁªàËøûÊé•**
 * ```plaintext
 * 1 -> 3 -> 5 -> 2 -> 4
 * ```
 *
 * ---
 *
 * **3. Êó∂Èó¥Â§çÊùÇÂ∫¶ÂàÜÊûê**
 * - Âè™ÈÅçÂéÜÈìæË°® **‰∏ÄÊ¨°**ÔºåÊâÄ‰ª•Êó∂Èó¥Â§çÊùÇÂ∫¶‰∏∫ **O(N)**
 *
 * **4. Á©∫Èó¥Â§çÊùÇÂ∫¶ÂàÜÊûê**
 * - Âè™‰ΩøÁî®‰∫ÜÂá†‰∏™ÊåáÈíàÔºå**È¢ùÂ§ñÁ©∫Èó¥ O(1)**
 * - **ÊÄªÁ©∫Èó¥Â§çÊùÇÂ∫¶ O(1)**
 */


public class LeetCode_328_OddEvenLinkedList{

//leetcode submit region begin(Prohibit modification and deletion)
    /**
     * Definition for singly-linked list.
     * public class ListNode {
     *     int val;
     *     ListNode next;
     *     ListNode() {}
     *     ListNode(int val) { this.val = val; }
     *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    public class Solution {
        public ListNode oddEvenList(ListNode head) {
            // Â¶ÇÊûúÈìæË°®‰∏∫Á©∫ÔºåÁõ¥Êé•ËøîÂõû null
            if (head == null) return null;

            // odd ÊåáÂêëÂ•áÊï∞‰ΩçÁΩÆÁöÑÂ§¥ÁªìÁÇπÔºåeven ÊåáÂêëÂÅ∂Êï∞‰ΩçÁΩÆÁöÑÂ§¥ÁªìÁÇπ
            ListNode odd = head, even = head.next, evenHead = even;

            // ÈÅçÂéÜÈìæË°®ÔºåÈáçÊñ∞ÊéíÂàóÂ•áÊï∞‰ΩçÂíåÂÅ∂Êï∞‰ΩçÁöÑËäÇÁÇπ
            while (even != null && even.next != null) {
                odd.next = even.next; // ËøûÊé•Â•áÊï∞ËäÇÁÇπÂà∞‰∏ã‰∏Ä‰∏™Â•áÊï∞‰ΩçÁΩÆ
                odd = odd.next; // ÁßªÂä® odd ÊåáÈíàÂà∞‰∏ã‰∏Ä‰∏™Â•áÊï∞‰ΩçÁΩÆ

                even.next = odd.next; // ËøûÊé•ÂÅ∂Êï∞ËäÇÁÇπÂà∞‰∏ã‰∏Ä‰∏™ÂÅ∂Êï∞‰ΩçÁΩÆ
                even = even.next; // ÁßªÂä® even ÊåáÈíàÂà∞‰∏ã‰∏Ä‰∏™ÂÅ∂Êï∞‰ΩçÁΩÆ
            }

            // Â∞ÜÂ•áÊï∞ÈìæË°®ÁöÑÊúÄÂêé‰∏Ä‰∏™ËäÇÁÇπËøûÊé•Âà∞ÂÅ∂Êï∞ÈìæË°®ÁöÑÂ§¥ÈÉ®
            odd.next = evenHead;

            // ËøîÂõûÈáçÊéíÂêéÁöÑÈìæË°®Â§¥ÈÉ®
            return head;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)


    public static void main(String[] args) {
        Solution solution = new LeetCode_328_OddEvenLinkedList().new Solution();

        // ÊµãËØïÊ†∑‰æã 1
        ListNode head1 = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5)))));
        ListNode result1 = solution.oddEvenList(head1);
        printList(result1); // È¢ÑÊúüËæìÂá∫: 1 -> 3 -> 5 -> 2 -> 4

        // ÊµãËØïÊ†∑‰æã 2
        ListNode head2 = new ListNode(2, new ListNode(1, new ListNode(3, new ListNode(5, new ListNode(6, new ListNode(4, new ListNode(7)))))));
        ListNode result2 = solution.oddEvenList(head2);
        printList(result2); // È¢ÑÊúüËæìÂá∫: 2 -> 3 -> 6 -> 7 -> 1 -> 5 -> 4

        // ÊµãËØïÊ†∑‰æã 3ÔºàÁ©∫ÈìæË°®Ôºâ
        ListNode head3 = null;
        ListNode result3 = solution.oddEvenList(head3);
        printList(result3); // È¢ÑÊúüËæìÂá∫: Á©∫ÈìæË°®

        // ÊµãËØïÊ†∑‰æã 4ÔºàÂçïËäÇÁÇπÈìæË°®Ôºâ
        ListNode head4 = new ListNode(1);
        ListNode result4 = solution.oddEvenList(head4);
        printList(result4); // È¢ÑÊúüËæìÂá∫: 1
    }

    // ËæÖÂä©ÊñπÊ≥ïÔºöÊâìÂç∞ÈìæË°®
    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val);
            if (current.next != null) System.out.print(" -> ");
            current = current.next;
        }
        System.out.println();
    }
}

/**
Given the head of a singly linked list, group all the nodes with odd indices 
together followed by the nodes with even indices, and return the reordered list. 

 The first node is considered odd, and the second node is even, and so on. 

 Note that the relative order inside both the even and odd groups should remain 
as it was in the input. 

 You must solve the problem in O(1) extra space complexity and O(n) time 
complexity. 

 
 Example 1: 
 
 
Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]
 

 Example 2: 
 
 
Input: head = [2,1,3,5,6,4,7]
Output: [2,3,6,7,1,5,4]
 

 
 Constraints: 

 
 The number of nodes in the linked list is in the range [0, 10‚Å¥]. 
 -10‚Å∂ <= Node.val <= 10‚Å∂ 
 

 Related Topics Linked List üëç 10523 üëé 552

*/